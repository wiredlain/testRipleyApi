{"version":3,"sources":["../../src/routes/products.js"],"names":["router","get","requiresLogin","requiresAuth","req","res","next","skus","params","trim","skusKey","client","err","result","resultJSON","JSON","parse","status","json","productService","getProducts","then","data","responseJSON","setex","stringify","forEach","skuKey","item","partNumber","toLocaleLowerCase","catch","console","log","message","response","error","sku","getProductBySku"],"mappings":"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","file":"products.js","sourcesContent":["import { Router } from 'express';\nimport productService from '../../services/productServices'\nimport { client } from '../../app';\nimport requiresLogin from '../authentication/firebase-middleware';\nlet router = Router();\n\n/* GET users listing. */\nrouter.get('/:skus', requiresLogin.requiresAuth, async(req, res, next) => {\n  const skus = (req.params.skus).trim();\n\n  const skusKey = `SKUS:${skus}`;\n\n  client.get(skusKey, (err, result) => {\n    if (result) {\n      const resultJSON = JSON.parse(result);\n      return res.status(200).json(resultJSON);\n    }\n    else {\n      productService.getProducts(skus).then((data) => {\n        const responseJSON = data;\n        client.setex(skusKey, 120, JSON.stringify(responseJSON));\n        responseJSON.forEach(item => {\n          const skuKey = `SKU:${item.partNumber.toLocaleLowerCase()}`;\n          client.setex(skuKey, 120, item);\n        });\n        return res.status(200).json(responseJSON);\n      }).catch(err => {\n        console.log(err.message);\n\n        return res.status(err.response.status || 404).json({error: err.message});\n      });\n    }\n  });\n  //res.send('respuesta de productos');\n});\n\nrouter.get('/by-id/:sku', async(req, res, next) => {\n  const sku = (req.params.sku).trim();\n\n  const skuKey = `SKU:${sku}`;\n\n  client.get(skuKey, (err, result) => {\n    if (result) {\n      const resultJSON = JSON.parse(result);\n      return res.status(200).json(resultJSON);\n    }\n    else {\n      productService.getProductBySku(sku).then((data) => {\n        const responseJSON = data;\n        client.setex(skuKey, 120, responseJSON);\n        return res.status(200).json(responseJSON);\n      }).catch(err => {\n        return res.status(err.response.status).json({error: err.message});\n      });\n    }\n  });\n});\n\nexport default router;\n"]}