{"version":3,"sources":["../../src/bin/server.js"],"names":["debug","require","port","normalizePort","process","env","PORT","app","set","server","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":"AAAA;;AAEA;;;;;AAIA;;;;AAEA;;AACA;;;;AAFA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAd;;AAIA;;;AAGA;AACA,MAAMC,IAAI,GAAGC,aAAa,CAACC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B;;AACAC,cAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;AAEA;;;;;AAIA,IAAIO,MAAM,GAAG,wBAAaF,aAAb,CAAb;AAEA;;;;AAIAE,MAAM,CAACC,MAAP,CAAcR,IAAd;AACAO,MAAM,CAACE,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAH,MAAM,CAACE,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AAEA;;;;AAIA,SAASV,aAAT,CAAuBW,GAAvB,EAA4B;AAC1B,MAAIZ,IAAI,GAAGa,QAAQ,CAACD,GAAD,EAAM,EAAN,CAAnB;;AAEA,MAAIE,KAAK,CAACd,IAAD,CAAT,EAAiB;AACf;AACA,WAAOY,GAAP;AACD;;AAED,MAAIZ,IAAI,IAAI,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;AAED;;;;;AAIA,SAASU,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,IAAI,GAAG,OAAOjB,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd,CALsB,CAStB;;AACA,UAAQe,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,+BAArB;AACAf,MAAAA,OAAO,CAACkB,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACED,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,oBAArB;AACAf,MAAAA,OAAO,CAACkB,IAAR,CAAa,CAAb;AACA;;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;AAED;;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAIU,IAAI,GAAGd,MAAM,CAACe,OAAP,EAAX;AACA,MAAIL,IAAI,GAAG,OAAOI,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAAI,CAACrB,IAFnB;AAGAF,EAAAA,KAAK,CAAC,kBAAkBmB,IAAnB,CAAL;AACD","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nimport app, { set } from '../app';\nconst debug = require('debug')('api:server');\nimport { createServer } from 'http';\nimport { config } from 'dotenv';\n\n/**\n * Get port from environment and store in Express.\n */\nconfig();\nconst port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"],"file":"server.js"}