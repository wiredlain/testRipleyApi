{"version":3,"sources":["../../src/utils/logger.js"],"names":["options","error","level","filename","appRoot","handleExceptions","json","maxsize","maxFiles","colorize","console","logger","winston","createLogger","transports","Console","File","exitOnError","stream","write","message","encoding","info","module","exports"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA;AACA,IAAIA,OAAO,GAAG;AACZC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,OADF;AAELC,IAAAA,QAAQ,EAAG,GAAEC,qBAAQ,iBAFhB;AAGLC,IAAAA,gBAAgB,EAAE,IAHb;AAILC,IAAAA,IAAI,EAAE,IAJD;AAKLC,IAAAA,OAAO,EAAE,OALJ;AAKa;AAClBC,IAAAA,QAAQ,EAAE,CANL;AAOLC,IAAAA,QAAQ,EAAE;AAPL,GADK;AAUZC,EAAAA,OAAO,EAAE;AACPR,IAAAA,KAAK,EAAE,OADA;AAEPG,IAAAA,gBAAgB,EAAE,IAFX;AAGPC,IAAAA,IAAI,EAAE,KAHC;AAIPG,IAAAA,QAAQ,EAAE;AAJH;AAVG,CAAd,C,CAkBA;;AACA,IAAIE,MAAM,GAAGC,kBAAQC,YAAR,CAAqB;AAC9BC,EAAAA,UAAU,EAAE,CACV,IAAKF,kBAAQE,UAAR,CAAmBC,OAAxB,CAAiCf,OAAO,CAACU,OAAzC,CADU,EAEV,IAAKE,kBAAQE,UAAR,CAAmBE,IAAxB,CAA8BhB,OAAO,CAACC,KAAtC,CAFU,CADkB;AAK9BgB,EAAAA,WAAW,EAAE,KALiB,CAKV;;AALU,CAArB,CAAb,C,CAQA;;;AACAN,MAAM,CAACO,MAAP,GAAgB;AACdC,EAAAA,KAAK,EAAE,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACjC;AACAV,IAAAA,MAAM,CAACW,IAAP,CAAYF,OAAZ;AACD;AAJa,CAAhB;AAOAG,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["import appRoot from 'app-root-path';\nimport winston from 'winston';\n\n// define the custom settings for each transport (file, console)\nvar options = {\n  error: {\n    level: 'error',\n    filename: `${appRoot}/logs/error.log`,\n    handleExceptions: true,\n    json: true,\n    maxsize: 5242880, // 5MB\n    maxFiles: 5,\n    colorize: true,\n  },\n  console: {\n    level: 'debug',\n    handleExceptions: true,\n    json: false,\n    colorize: true,\n  },\n};\n\n// instantiate a new Winston Logger with the settings defined above\nlet logger = winston.createLogger({\n    transports: [\n      new (winston.transports.Console)(options.console),\n      new (winston.transports.File)(options.error)\n    ],\n    exitOnError: false, // do not exit on handled exceptions\n  });\n\n// create a stream object with a 'write' function that will be used by `morgan`\nlogger.stream = {\n  write: function(message, encoding) {\n    // use the 'info' log level so the output will be picked up by both transports (file and console)\n    logger.info(message);\n  },\n};\n\nmodule.exports = logger;"],"file":"logger.js"}