{"version":3,"sources":["../src/app.js"],"names":["router","bluebird","promisifyAll","redis","RedisClient","prototype","Multi","app","LoggerMiddleware","req","res","next","random","Math","floor","originalUrl","indexOf","errorMessage","logger","error","method","ip","status","send","use","REDIS_URL","process","env","client","createClient","on","console","log","err","set","__dirname","debug","stream","winston","write","bodyParser","urlencoded","extended","json","express","static","indexRouter","usersRouter","productsRouter","locals","message","get","render"],"mappings":"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","file":"app.js","sourcesContent":["import express, { Router, urlencoded } from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport { config } from 'dotenv';\nimport redis from 'redis';\nimport bluebird from 'bluebird';\nimport logger from './utils/logger';\nimport winston from 'winston';\n\nconfig();\n\nconst router = Router();\n\nimport { join } from 'path';\nimport cookieParser from 'cookie-parser';\nimport morgan from 'morgan';\n\nimport indexRouter from './src/routes/index';\nimport usersRouter from './src/routes/users';\nimport productsRouter from './src/routes/products';\n\n\nbluebird.promisifyAll(redis.RedisClient.prototype);\nbluebird.promisifyAll(redis.Multi.prototype);\n\nconst app = express();\n\nconst LoggerMiddleware = (req,res,next) => {\n\n  const random = Math.floor(Math.random() * 100) + 1;\n  const { originalUrl } = req;\n  if (random < 15 && (originalUrl.indexOf('login') === -1)) {\n    let errorMessage = `Error Code: 500\\nMessage: error simulado`;\n    logger.error(`500 - ${errorMessage} - ${req.originalUrl} - ${req.method} - ${req.ip}`);\n    return res.status(500).send(errorMessage);\n  }\n\n  next();\n};\n\napp.use(LoggerMiddleware);\n\nconst REDIS_URL = process.env.REDIS_URL;\nexport const client = redis.createClient(REDIS_URL)\n\nclient.on('connect', () => {\n  console.log(`connected to redis`);\n});\nclient.on('error', err => {\n  console.log(`Error: ${err}`);\n});\n\n\n// view engine setup\napp.set('views', join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(cors());\napp.use(helmet());\n// if ('development' === process.env || 'test' === process.env) {\n  logger.debug(\"Overriding 'Express' logger\");\n  app.use(morgan('combined', { stream: winston.stream.write }));\n  //app.use(errorHandler()); // Error handler - has to be last\n// }\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(join(__dirname, 'public')));\n\nrouter.use('/', indexRouter);\nrouter.use('/users', usersRouter);\nrouter.use('/products', productsRouter);\n\napp.use('/api', router);\n\n// error handler\n// error handler\napp.use(function (err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n  // Escribimos el error\n  logger.error(`${err.status || 500} - ${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`);\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n  });\n\nexport default app;\n"]}